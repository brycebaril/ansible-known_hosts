#!/bin/bash
# Copyright (c) Bryce B. Baril <bryce@ravenwall.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# From http://jpmens.net/2012/07/05/shell-scripts-as-ansible-modules/
eval $(sed -e "s/\s?\([^=]+\)\s?=\s?\(\x22\([^\x22]+\)\x22|\x27\([^\x27]+\)\x27|\(\S+\)\)\s?/\1='\2'/p" $1)

# host
# port
# state present|absent
# file
# owner

if [ -z "$host" ]
then
  echo "{\"failed\": true, \"msg\": \"host is required, e.g. github.com\"}"
  exit 1
fi

# default state=present
if [ -z "$state" ]
then
  state="present"
fi

if [ "$state" != "present" -a "$state" != "absent" ]
then
  echo "{\"failed\": true, \"msg\": \"state must be 'present' or 'absent'\"}"
  exit 1
fi

# default port = 22
if [ -z "$port" ]
then
  port=22
fi

# default file = $HOME/.ssh/known_hosts
if [ -z "$file" ]
then
  file=$HOME/.ssh/known_hosts
fi

if [ ! -e "$file" ]
then
  mkdir -p $(dirname $file)
  touch $file
fi

if [ -z "$owner" ];
then
  owner=$(whoami)
fi

ip=$(getent hosts $host | cut -f 1 -d ' ')

keygen_name=$host
if [ -z "$port" -a $port -ne 22 ]
then
  keygen_name="[$host]:$port"
fi

have_host=$(su - $owner -c "ssh-keygen -F $keygen_name -f $file")
have_ip=$(su - $owner -c "ssh-keygen -F $ip -f $file")
have="$have_host$have_ip"

if [ -n "$have" -a $state == "absent" ]
then
  for h in $keygen_name $ip
  do
    su - $owner -c "ssh-keygen -R $h -f $file &> /dev/null"
    if [ ! $? -eq 0 ]
    then
      echo "{\"failed\": true, \"msg\": \"Failed to remove host from known_hosts file\"}"
      exit 1
    fi
  done
  echo "{\"changed\": true}"
  exit
elif [ -z "$have" -a $state == "present" ]
then
  for h in $host $ip
  do
    su - $owner -c "ssh-keyscan -p $port -H $h 2> /dev/null >> $file"
    if [ ! $? -eq 0 ]
    then
      echo "{\"failed\": true, \"msg\": \"Failed to add host to known_hosts file\"}"
      exit 1
    fi
  done
  echo "{\"changed\": true}"
  exit
fi

echo "{\"changed\": false}"
exit
